#! /usr/bin/perl
#
# sbuild: build packages, obeying source dependencies
# Copyright © 1998-2000 Roman Hodek <Roman.Hodek@informatik.uni-erlangen.de>
# Copyright © 2005      Ryan Murray <rmurray@debian.org>
# Copyright © 2005-2008 Roger Leigh <rleigh@debian.org
# Copyright © 2008      Timothy G Abbott <tabbott@mit.edu>
# Copyright © 2008      Simon McVittie <smcv@debian.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#
#######################################################################

package conf;

use Sbuild::Conf;


package main;

use strict;
use warnings;

use POSIX;
use Data::Dumper;
use Sbuild::Log qw(open_log close_log);
use Sbuild::Sysconfig qw(%programs);
use Sbuild::Options;
use Sbuild::Build;

sub main ();
sub shutdown ($);
sub check_group_membership ($);
sub dump_main_state ();

my $conf = Sbuild::Conf->new();
exit 1 if !defined($conf);
my $options = Sbuild::Options->new($conf);
exit 1 if !defined($options);

umask(022);

$main::build_object = undef;

main();

sub main () {
    print "Selected distribution " . $conf->get('DISTRIBUTION') . "\n"
	if $conf->get('DEBUG');
    print "Selected chroot " . $conf->get('CHROOT') . "\n"
	if $conf->get('DEBUG') and defined $conf->get('CHROOT');
    print "Selected architecture " . $conf->get('ARCH') . "\n"
	if $conf->get('DEBUG' && defined($conf->get('ARCH')));

    open_log($conf->get('DISTRIBUTION'), $conf);

    $SIG{'INT'} = \&shutdown;
    $SIG{'TERM'} = \&shutdown;
    $SIG{'ALRM'} = \&shutdown;
    $SIG{'PIPE'} = \&shutdown;

    my $dscfile;
    foreach $dscfile (@ARGV) {

	# TODO: Append to build list, to allow parallel builds.
	my $build = Sbuild::Build->new($dscfile, $conf);
	$main::build_object = $build;
	$main::current_job = $main::build_object->get('Package_Version');

	$build->run();

	$main::current_job = "";

	dump_main_state() if $conf->get('DEBUG');

	if ($conf->get('BATCH_MODE') and (-f $conf->get('HOME') . '/EXIT-DAEMON-PLEASE') ) {
	    main::shutdown("NONE (flag file exit)");
	}

    }

    close_log($conf);
    unlink($main::build_object->get('Jobs File'))
	if $conf->get('BATCH_MODE');
    unlink("SBUILD-FINISHED") if $conf->get('BATCH_MODE');
    if ($conf->get('SBUILD_MODE') eq "user" && defined($main::build_object)) {
	    exit ($main::build_object->get('Pkg Status') ne "successful") ? 1 : 0;
    }
    exit 0;
}

sub shutdown ($) {
    my $signame = shift;
    my($job,@npkgs,@pkgs);
    local( *F );

    $SIG{'INT'} = 'IGNORE';
    $SIG{'QUIT'} = 'IGNORE';
    $SIG{'TERM'} = 'IGNORE';
    $SIG{'ALRM'} = 'IGNORE';
    $SIG{'PIPE'} = 'IGNORE';
    $main::build_object->log("sbuild received SIG$signame -- shutting down\n");

    goto not_ni_shutdown if !$conf->get('BATCH_MODE');

    # most important: dump out names of unfinished jobs to REDO
    foreach $job (@ARGV) {
	my $job2 = $job;
	$job2 = $main::build_object->fixup_pkgv($job2);
	push( @npkgs, $job2 )
	    if !$main::job_state{$job} || $job eq $main::current_job;
    }
    print LOG "The following jobs were not finished: @npkgs\n";

    my $f = "REDO";
    if (-f "REDO.lock") {
	# if lock file exists, write to a different file -- timing may
	# be critical
	$f = "REDO2";
    }
    if (open( F, "<$f" )) {
	@pkgs = <F>;
	close( F );
    }
    if (open( F, ">>$f" )) {
	foreach $job (@npkgs) {
	    next if grep( /^\Q$job\E\s/, @pkgs );
	    if (not defined $main::build_object->get_conf('BIN_NMU_VERSION')) {
		print F "$job " .
		    $main::build_object->get_conf('DISTRIBUTION') . "\n";
	    } else {
		print F "$job " .
		    $main::build_object->get_conf('DISTRIBUTION')
		    . " " .
		    $main::build_object->get_conf('BIN_NMU_VERSION')
		    . " " .
		    $main::build_object->get_conf('BIN_NMU') . "\n";
	    }
	}
	close( F );
    }
    else {
	print "Cannot open $f: $!\n";
    }
    open( F, ">SBUILD-REDO-DUMPED" );
    close( F );
    print LOG "SBUILD-REDO-DUMPED created\n";
    unlink( "SBUILD-FINISHED" );

    # next: say which packages should be uninstalled
    @pkgs = keys %{$main::build_object->get('Changes')->{'installed'}};
    if (@pkgs) {
	if (open( F, ">>NEED-TO-UNINSTALL" )) {
	    print F "@pkgs\n";
	    close( F );
	}
	print "The following packages still need to be uninstalled ",
	"(--purge):\n@pkgs\n";
    }

  not_ni_shutdown:
    # next: kill currently running command (if one)
    if ($main::build_object->get('Sub PID')) {
	print "Killing " . $main::build_object->get('Sub Task') .
	    " subprocess " . $main::build_object->get('Sub PID') . "\n";
	$main::build_object->get('Session')->run_command(
		{ COMMAND => ['perl', '-e',
			      "\"kill( \\\"TERM\\\", " .
			      $main::build_object->get('Sub PID') .
			      " )\""],
		  USER => 'root',
		  CHROOT => 1,
		  PRIORITY => 0,
		  DIR => '/' });
    }
    $main::build_object->remove_srcdep_lock_file();

    # close logs and send mails
    if ( $main::current_job && defined($main::build_object->get('Session'))) {
	if ($conf->get('PURGE_BUILD_DIRECTORY') eq "always") {
	    $main::build_object->log("Purging " . $main::build_object->get('Chroot Build Dir') . "\n");
	    my $bdir = $main::build_object->get('Session')->strip_chroot_path($main::build_object->get('Chroot Build Dir'));
	    $main::build_object->get('Session')->run_command(
		{ COMMAND => [$Sbuild::Sysconfig::programs{'RM'},
			      '-rf', $bdir],
		  USER => 'root',
		  CHROOT => 1,
		  PRIORITY => 0,
		  DIR => '/' });
	}

	$main::current_job =
	    $main::build_object->fixup_pkgv($main::current_job);

	$main::build_object->get('Session')->end_session();
	$main::build_object->set('Session', undef);

	$main::build_object->close_build_log();
	$main::build_object->set('binNMU Name', undef);
    }
    close_log($conf);
    unlink( $main::build_object->get('Jobs File') ) if $conf->get('BATCH_MODE');
    $? = 0; $! = 0;
    if ($conf->get('SBUILD_MODE') eq "user") {
	exit 1;
    }
    exit 0;
}

sub dump_main_state () {
    print STDERR Data::Dumper->Dump([$main::build_object,
				     $main::current_job,
				     \%main::job_state],
				    [qw($main::build_object
					$main::current_job
					%main::job_state)] );
}

# avoid intermixing of stdout and stderr
$| = 1;
# in case the terminal disappears, the build should continue
$SIG{'HUP'} = 'IGNORE';
