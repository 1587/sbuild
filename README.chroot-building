                                                    -*- mode: indented-text -*-


			 Building in chroot environments with sbuild
			 -------------------------------------------

					  Roman Hodek, June 7th 2000


Starting with revision 1.133, sbuild can build packages also in a
chroot environment. (You also need buildd-addpkg >= 1.5). There are
different such environments for each distribution. The advantages of
this are:

 - You can build for different distributions on the same machine
   without headaches about shared library version or the like.

 - Badly programmed build procedures can't modify files on the build
   host.

 - The access time check for binaries used without a source dependency
   becomes a bit more reliable, because normal user activities can't
   cause an atime change.

It works like in the following outline:

 - For each distribution (stable, frozen, unstable), there's a
   separate installation in (e.g.) /usr/local/chroot/DIST. (This path
   isn't hardwired, but used in this documentation.)

 - The chroot environment can be prepared with buildd-setup-chroot.

 - If in the build directory a symlink chroot-DIST exists (and the
   build is for DIST), then sbuild will unpack the sources in
   chroot-DIST/build/USERNAME and build the package there.
   dpkg-buildpackage will be called under chroot, so that the whole
   build process can't access files outside the build root.

 - All apt and dpkg and similar operations are also chroot-ed, so only
   the chroot environment for that distribution is affected. That way,
   different shared lib versions can coexist on the same machine and
   the like. (It also reduces waiting time for parallel builds: If
   they're for different distributions, installations can happen at
   the same time and don't need to wait for each other.)

Ok, now a bit more slowly:

Best you prepare your chroot environments with the script
buildd-setup-chroot. It does lots of things automatically. However,
manual fixes may be required. buildd-setup-chroot is usually called
as:

  sudo buildd-setup-chroot -a /my/debian/archive -d DIST /usr/local/chroot/DIST

A path to the Debian archive has to be passed with -a. The -d option
for the distribution is also required. The parameter is the name of
the chroot dir; it is created if necessary. Another option is -u
(--user) to select the login name of the build daemon user. The
default 'buildd' should be correct in most cases. The option -f
(--force) removes the whole chroot directory before doing anything
else and so starts from the beginning.

buildd-setup-chroot should be idempotent, i.e. most steps aren't
repeated if they're already done. If some are repeated, the effect
should be the same as before. This way, you can call the script as
often as you like and fix errors in between and repeat until
everything works.

buildd-setup-chroot now does the following:

 - It unpacks the base filesystem (base*.tgz) from the install disks
   of the distribution. (The base*.tgz from frozen is used if none for
   unstable is available.)
 - It creates some dirs in the chroot env. (/build/USER, /AddPkg/DIST,
   /var/debbuild/srcdep-lock)
 - It copies some config files from the host filesystem, mostly
   network related to make FTP/HTTP connections possible for apt.
 - /proc is mounted inside the chroot environment.
 - The apt configuration (apt.conf and sources.list) from the host are
   copied and modified as needed. The most important modification is
   to list correct distributions in sources.list, as appropriate for
   the target dist of the chroot env. This means: From the source.list
   of the host system, deb lines of source.list are deleted or copied
   so that in the end all distributions from stable up to and
   including DIST are contained. Also, the /AddPkg/DIST directories
   are added to sources.list for access to freshly built libraries.
   Another modification is that --force-conf* is deleted from apt.conf
   in Dpkg::Options if dpkg is older than 1.4.1.18.
 - If deb lines have file:/ URIs, they refer to local files that
   aren't available in the chroot environment. Therefore, the script
   adds NFS mounts from localhost for such dirs. See below for more
   details.
 - The directories /usr/src/kernel-headers-2.[1234] are NFS-mounted
   inside the chroot env. Those dirs are needed by some special
   dependencies (e.g. *KERNEL-HEADERS-2.1).
 - Some packages not needed in a chroot environment are removed from the
   installation (lilo kbd kbd-data ...).
 - The installation is upgraded from base disk level to current with an
   apt-get dist-upgrade.
 - Now build-essential packages and those often needed for building
   (automake, zlib1g-dev, ..._) are installed.
 - Finally, a symlink ~buildd/build/chroot-DIST ->
   /usr/local/chroot/DIST is created that is later used by sbuild.

To the NFS mounts: I found no better way for making global files
shareable between the different chroot environments... If someone has
a better idea, please tell me :-) Those files needed to be shared are
any Debian archives (if you have a local mirror) and the packages
under ~buildd/AddPkg.

Paths that should be shared with chroot environments are automatically
added to /etc/exports. After /etc/exports changes are complete, the
NFS server is reloaded and the paths are mounted. Finally, the NFS
mounts just done are also put into /etc/fstab so they're reestablished
after a reboot.

buildd-setup-chroot does some things automatically, but it might be
wise to check /etc/{fstab,export} afterwards for correctness :-)

Attention is required if the shared paths are NFS-mounted
themselves... An example could be a home directory or the Debian
archive. To be able to re-export such paths, you have to start
rpc.mountd with the -r option ("allow recursive NFS mounts"),
otherwise you'll experience strange "permission denied" errors. But
even with that my experiments failed because only the top-level
directory was visible and nothing under it. I don't know if that's
intentional or a bug somewhere. In most cases it will be more
convenient to avoid the re-export introduced by buildd-setup-chroot
and modify /etc/fstab to mount the original source directly multiple
times.

Ok, after the chroot environments for all the distributions you want
are set up, you can start building in them. sbuild recognizes the
chroot environments by the existance of a chroot-DIST symlink in its
build directory (the dir where sbuild is started). If such a link
doesn't exist for the requested distribution, a normal build in the
host filesystem is performed like you're used to.

If, however, the symlink exists, it should point to the root of the
chroot environment. Sources are unpacked in
chroot-DIST/build/USERNAME. (The username is appended so that multiple
users can utilize the chroot environment at the same time without
mixing the source trees.) All checks for packages and package
installations are performed --of course-- in the chroot. After
building, the .debs and the .changes file are moved back to the normal
build directory. (If a build fails, the source tree isn't moved back
but remains in chroot-DIST/build/USERNAME.)

One point still worth mentioning is how the AddPkg directories are
handled. Those directories contain freshly built packages that might
be needed for building other packages before they're installed in the
archive. Since revision 1.5 of buildd-addpkg, the AddPkg packages are
separated by distribution, which is necessary to export them
selectivly into the chroot environments. For example, in the frozen
chroot, only AddPkg/stable and AddPkg/frozen will be mounted but not
AddPkg/unstable, because unstable packages may not be used for
building frozen packages. Likewise the stable chroot mounts only
AddPkg/stable, and the unstable one mounts all three.

The access from inside the chroot environments to the AddPkg packages
works over the local NFS mounts described above. The appropriate deb
lines in sources.list should have been created by buildd-setup-chroot.

The installation into an AddPkg directory by sbuild and buildd-addpkg
is done from outside the chroot environment.


